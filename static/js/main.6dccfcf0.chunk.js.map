{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAdH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAGvB,OACC,yBAAKC,UAAU,oDACf,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCaKK,EAnBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAQ,kBAAC,EAAD,CACRC,IAAMJ,EAAOG,GAAGR,GAChBA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAQM,EAAOG,GAAGT,aCGLW,EAbE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAClB,OACC,yBAAKV,UAAY,OACjB,2BACAA,UAAW,mCACXW,KAAO,SACPC,YAAa,gBACbC,SAAUH,MCEGI,EATA,SAACC,GACd,OACF,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCyCQC,G,kBAtCf,aAAc,IAAD,8BACX,+CAcFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAM,CACTxB,OAAO,GACPqB,YAAY,IAJH,E,iFAQO,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAS9B,IAAD,EACoBC,KAAKN,MAAzBxB,EADA,EACAA,OAAOqB,EADP,EACOA,YACPU,EAAgB/B,EAAOgC,QAAO,SAAAC,GAClC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASd,EAAYa,kBAEvD,OAAQlC,EAAOoC,OAEf,yBAAKxC,UAAW,MACd,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAWU,aAAgBwB,KAAKZ,iBAChC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQ+B,MANG,8C,GA3BPM,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.6dccfcf0.chunk.js","sourcesContent":["import React from 'react'\nconst Card =({name,email,id} )=>{ // could even destructre at a props  level. so replace props with {name,email,id} \n//meaning we don't have to declare the =props as they are automatciall declared ass props\n\t//const {name,email,id} = props;// destructuring - props doesn't ahve to be wrtten each time then below\n  return (\n  \t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n  \t<img  alt='robots' src={`https://robohash.org/${id}?200x200`}/> \n  \t  <div>\n  \t   <h2>{name}</h2>\n  \t   <p>{email}</p>\n  \t  </div>\n  \t</div>\n   )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList =({robots})=>{ // destructured, see card.js for details off how\nreturn (\n\t<div>\n\t{\n\t\trobots.map((user,i) => {\n\t\treturn (<Card \n\t\tkey ={robots[i].id} // not recomended to use i as it can change, see here for generating unique keys  https://stackoverflow.com/questions/39549424/how-to-create-unique-keys-for-react-elements/51428373\n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\temail= {robots[i].email}\n\t\t/>\n\t\t)\n\t})\n\t}\n</div>\n);\n\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox= ({SearchChange})=>{\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t<input \n\t\tclassName ='pa3 ba b--green bg-lightest-blue'\n\t\ttype = 'search' \n\t\tplaceholder ='search robots' \n\t\tonChange={SearchChange}\n\t\t/>\n\t\t</div>\n\t\t)\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) =>{\n  return(\n<div style={{overflowY:'scroll', border: '1px solid black', height: '800px'}}>\n{props.children}\n</div>\n  \t);\n};\n\n\nexport default Scroll","import React, {Component} from 'react';\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nclass App extends Component{// App.js is a smart component as it has state whihc describes the app\n\t//and has the class syntax\nconstructor(){\n  super() \n  this.state={\n    robots:[],\n    searchfield:'' // this is the only area that can chnage but it should not be chnaged directly\n  //instead use setstate\n}\n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')// fetch is a window object notice it doesnt attacch to anything - means its native\n    .then(response=>response.json())\n    .then(users=>this.setState({robots:users}))\n  }\n \n\nonSearchChange=(event)=>{ // always use an arrow here on your own funcitonality esel it will error\n  this.setState({searchfield: event.target.value}) // this stops state from being modified directly\n// notice we have chnaged the  key searchfield value - changes this field to whatever we type\n}\n\nrender(){\n  const{robots,searchfield}=this.state\n  const filteredRobots =robots.filter(robot=>{\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n})\n  return !robots.length? <h1>Loading...</h1>:\n  (\n  <div className ='tc'>\n    <h1 className ='f1'>RoboFriends</h1>\n    <SearchBox SearchChange = {this.onSearchChange}/>\n    <Scroll>\n    <CardList robots={filteredRobots}/>\n    </Scroll>\n </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Card from './Card';\n// import CardList from './CardList'\nimport 'tachyons'\n // because this file is not using export default and just default we need to use brackets\n                                //for destructuring. if the  robots js had another variable could write it like \n                                // {robots,cats,mice}\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}