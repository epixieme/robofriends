{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","SearchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAeeA,EAdH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAGvB,OACC,yBAAKC,UAAU,oDACf,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKF,GACL,2BAAIC,MCaKK,EAnBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAClB,OACC,6BAECA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAQ,kBAAC,EAAD,CACRC,IAAMJ,EAAOG,GAAGR,GAChBA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAQM,EAAOG,GAAGT,aCGLW,EAbE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAClB,OACC,yBAAKV,UAAY,OACjB,2BACAA,UAAW,mCACXW,KAAO,SACPC,YAAa,gBACbC,SAAUH,MCTCN,EAAO,CAEpB,CACCL,GAAG,EACHF,KAAM,gBACNiB,SAAU,WACVhB,MAAO,2BAGR,CACCC,GAAG,EACHF,KAAM,iBACNiB,SAAU,YACVhB,MAAO,4BAER,CACCC,GAAG,EACHF,KAAM,cACNiB,SAAU,QACVhB,MAAO,wBAER,CACCC,GAAG,EACHF,KAAM,WACNiB,SAAU,OACVhB,MAAO,uBAER,CACCC,GAAG,EACHF,KAAM,QACNiB,SAAU,KACVhB,MAAO,qBAER,CACCC,GAAG,EACHF,KAAM,mBACNiB,SAAU,SACVhB,MAAO,yBAER,CACCC,GAAG,EACHF,KAAM,eACNiB,SAAU,QACVhB,MAAO,wBAER,CACCC,GAAG,EACHF,KAAM,gBACNiB,SAAU,UACVhB,MAAO,0BAER,CACCC,GAAG,EACHF,KAAM,YACNiB,SAAU,OACVhB,MAAO,uBAER,CACCC,GAAG,GACHF,KAAM,iBACNiB,SAAU,QACVhB,MAAO,yBCxBOiB,G,kBA9Bf,aAAc,IAAD,8BACb,+CAOAC,eAAe,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAM,CACTlB,OAAOA,EACPe,YAAY,IAJD,E,sEAaJ,IAAD,OACFI,EAAgBC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAAC,GAC/C,OAAOA,EAAM7B,KAAK8B,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAGhE,OACA,yBAAK3B,UAAW,MACd,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAWU,aAAgBc,KAAKR,iBAChC,kBAAC,EAAD,CAAUZ,OAAQmB,S,GAvBFM,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a20dfd11.chunk.js","sourcesContent":["import React from 'react'\nconst Card =({name,email,id} )=>{ // could even destructre at a props  level. so replace props with {name,email,id} \n//meaning we don't have to declare the =props as they are automatciall declared ass props\n\t//const {name,email,id} = props;// destructuring - props doesn't ahve to be wrtten each time then below\n  return (\n  \t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n  \t<img  alt='robots' src={`https://robohash.org/${id}?200x200`}/> \n  \t  <div>\n  \t   <h2>{name}</h2>\n  \t   <p>{email}</p>\n  \t  </div>\n  \t</div>\n   )\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\n\nconst CardList =({robots})=>{ // destructured, see card.js for details off how\nreturn (\n\t<div>\n\t{\n\t\trobots.map((user,i) => {\n\t\treturn (<Card \n\t\tkey ={robots[i].id} // not recomended to use i as it can change, see here for generating unique keys  https://stackoverflow.com/questions/39549424/how-to-create-unique-keys-for-react-elements/51428373\n\t\tid={robots[i].id} \n\t\tname={robots[i].name} \n\t\temail= {robots[i].email}\n\t\t/>\n\t\t)\n\t})\n\t}\n</div>\n);\n\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox= ({SearchChange})=>{\n\treturn (\n\t\t<div className = 'pa2'>\n\t\t<input \n\t\tclassName ='pa3 ba b--green bg-lightest-blue'\n\t\ttype = 'search' \n\t\tplaceholder ='search robots' \n\t\tonChange={SearchChange}\n\t\t/>\n\t\t</div>\n\t\t)\n}\n\nexport default SearchBox","export const robots=[\n\n{\n\tid:1,\n\tname: 'Princess Leah',\n\tusername: 'Princess',\n\temail: 'princess@starwars.co.uk'\n},\n\n{\n\tid:2,\n\tname: 'Luke Skywalker',\n\tusername: 'Skywalker',\n\temail: 'Skywalker@starwars.co.uk'\n},\n{\n\tid:3,\n\tname: 'Darth Vader',\n\tusername: 'Darth',\n\temail: 'Darth@starwars.co.uk'\n},\n{\n\tid:4,\n\tname: 'Han Solo',\n\tusername: 'Solo',\n\temail: 'solo@starwars.co.uk'\n},\n{\n\tid:5,\n\tname: 'R2 D2',\n\tusername: 'D2',\n\temail: 'd2@starwars.co.uk'\n},\n{\n\tid:6,\n\tname: 'Chewwy Chewbacca',\n\tusername: 'Chewwy',\n\temail: 'Chewwy@starwars.co.uk'\n},\n{\n\tid:7,\n\tname: 'Temple Guard',\n\tusername: 'Guard',\n\temail: 'guard@starwars.co.uk'\n},\n{\n\tid:8,\n\tname: 'Admiral Motti',\n\tusername: 'Admiral',\n\temail: 'admiral@starwars.co.uk'\n},\n{\n\tid:9,\n\tname: 'Owen Lars',\n\tusername: 'Owen',\n\temail: 'owen@starwars.co.uk'\n},\n{\n\tid:10,\n\tname: 'Jabba The Hutt',\n\tusername: 'Jabba',\n\temail: 'jabba@starwars.co.uk'\n}\n]","import React, {Component} from 'react';\nimport CardList from './CardList'\nimport SearchBox from './SearchBox'\nimport {robots} from './robots'\nimport './App.css'\n\nclass App extends Component{\nconstructor(){\nsuper()\nthis.state={\n  robots:robots,\n  searchfield:'' // this is the only area that can chnage but it should not be chnaged directly\n  //instead use setstate\n}\n}\nonSearchChange=(event)=>{ // always use an arrow here on your own funcitonality esel it will error\nthis.setState({searchfield: event.target.value}) // this stops state from being modified directly\n// notice we have chnaged the  key searchfield value - changes this field to whatever we type\n}\n\nrender(){\nconst filteredRobots =this.state.robots.filter(robot=>{\nreturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n})\n\nreturn (\n<div className ='tc'>\n  <h1 className ='f1'>RoboFriends</h1>\n  <SearchBox SearchChange = {this.onSearchChange}/>\n  <CardList robots={filteredRobots}/>\n</div>\n  );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Card from './Card';\n// import CardList from './CardList'\nimport 'tachyons'\n // because this file is not using export default and just default we need to use brackets\n                                //for destructuring. if the  robots js had another variable could write it like \n                                // {robots,cats,mice}\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}